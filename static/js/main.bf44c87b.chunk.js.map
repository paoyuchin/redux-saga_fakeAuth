{"version":3,"sources":["store/action/actions.js","pageComponent/AuthStatus.js","pageComponent/PrivateRoute.js","pageComponent/Login.js","pageComponent/Public.js","pageComponent/Protected.js","App.js","serviceWorker.js","store/reducer/authReducer.js","store/reducer/rootReducer.js","API/index.js","sagas/login.js","sagas/index.js","index.js"],"names":["LOGIN_REQUEST","LOGOUT_REQUEST","LOGIN_CANCEL","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_SUCCESS","AuthStatus","_this","this","props","isAuthenticated","react_default","a","createElement","Button","size","color","onClick","logOut","history","push","Component","withRouter","connect","state","auth","dispatch","type","PrivateRoute","_this$props","ProtectedComponent","react_router","Object","assign","render","to","pathname","from","location","Loading","ButtonToolbar_default","Button_default","variant","disabled","Spinner_default","as","animation","role","aria-hidden","Login","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","prevState","modal","handleChange","e","_this$setState","defineProperty","target","id","value","handleSubmit","preventDefault","username","password","logIn","showEmptyInputMessage","_this2","Modal","isOpen","className","ModalHeader","Form","onSubmit","FormGroup","Label","for","Input","onChange","name","placeholder","errorMessage","message","loading","status","Login_Loading","ModalFooter","outline","loginCancel","isLoginFailed","error","isLoginCancel","credential","loginRequest","Public","Protected","AuthExample","react_router_dom","pageComponent_AuthStatus","path","component","pageComponent_PrivateRoute","pageComponent_Login","Boolean","window","hostname","match","authReducer","arguments","length","undefined","action","console","log","rootReducer","combineReducers","loginAPI","Promise","resolve","reject","setTimeout","Error","watchRequestLogin","loginFlow","authorize","watchRequestLogout","logoutFlow","regenerator_default","wrap","_context","prev","next","takeEvery","stop","_marked","task","_context2","fork","sent","take","cancel","_marked2","response","_context3","put","t0","finish","_marked3","_context4","_marked4","_context5","_marked5","rootSaga","all","sagas_marked","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunk","run","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf44c87b.chunk.js","sourcesContent":["\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGIN_CANCEL = 'LOGIN_CANCEL';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n// export const LOGINFAILED = 'LOGINFAILED';\n\n\nexport function loginRequest(credential) {\n  return {\n    type: LOGIN_REQUEST,\n    credential\n  }\n};\n\nexport function logOut() {\n  return {\n    type: LOGOUT_REQUEST,\n  }\n}\n\nexport function loginCancel() {\n  return {\n    type: LOGIN_CANCEL\n  }\n}\n\nexport function loginSuccess(response) {\n  return {\n    type: LOGIN_SUCCESS,\n    response\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { logOut } from \"../store/action/actions\";\nimport \"../App.css\";\nimport { Button } from \"reactstrap\";\n\nclass AuthStatus extends Component {\n  render() {\n    return this.props.isAuthenticated ? (\n      <p>\n        Welcome!\n        <Button\n          size=\"sm\"\n          color=\"primary\"\n          onClick={() => {\n            this.props.logOut();\n            this.props.history.push(\"/\");\n          }}\n        >\n          Sign out\n        </Button>\n      </p>\n    ) : (\n      <p>You are not signed in.</p>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logOut: () => {\n      dispatch(logOut());\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(AuthStatus)\n);\n","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"../App.css\";\n\n\nclass PrivateRoute extends Component {\n  render() {\n    const { ProtectedComponent, isAuthenticated } = this.props;\n    return (\n      <Route\n        {...this.props}\n        render={props => {\n          return isAuthenticated ? (\n            <ProtectedComponent {...this.props} />\n          ) : (\n            <div>\n              <Redirect\n                to={{\n                  pathname: \"/login\",\n                  state: { from: props.location.pathname }\n                }}\n              />\n            </div>\n          );\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PrivateRoute);\n// export default PrivateRoute;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { connect } from \"react-redux\";\nimport { loginRequest, loginCancel } from \"../store/action/actions\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormFeedback\n} from \"reactstrap\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button1 from \"react-bootstrap/Button\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\n\nconst Loading = () => {\n  return (\n    <ButtonToolbar>\n      <Button1 variant=\"primary\" disabled>\n        <Spinner\n          as=\"span\"\n          animation=\"grow\"\n          size=\"sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        />\n        Loading...\n      </Button1>\n    </ButtonToolbar>\n  );\n};\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      username: \"\",\n      password: \"\",\n      showEmptyInputMessage: false\n    };\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value,\n      showEmptyInputMessage: false      \n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();    \n    if (this.state.username === \"\" || this.state.password === \"\") {\n      this.setState(prevState => ({\n        showEmptyInputMessage: true\n      }));\n      return;\n    } else {\n      this.props.logIn(this.state);\n    }\n  };\n  render() {\n    let { from } = this.props.location.state || { from: \"/\" };\n    // let { redirectToReferrer } = this.state;\n    // if (redirectToReferrer) return <Redirect to={from} />;\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/protected\");\n    }\n    return (\n      <div>\n        <p>You must log in to view the page at {from} </p>\n        <Button variant=\"info\" size=\"sm\" onClick={this.toggle}>\n          Sign in\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader>Sign in</ModalHeader>\n          <Form onSubmit={this.handleSubmit}>\n            <FormGroup>\n              <Label for=\"exampleEmail\">username</Label>\n              <Input\n                onChange={this.handleChange}\n                name=\"email\"\n                id=\"username\"\n                placeholder=\"username\"\n              />\n              {this.state.showEmptyInputMessage ? (\n                <p className=\"text-danger\">This is a required field</p>\n              ) : (\n                false\n              )}\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"examplePassword\">password</Label>\n              <Input\n                onChange={this.handleChange}\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"password\"\n              />\n              {this.state.showEmptyInputMessage ? (\n                <p className=\"text-danger\">This is a required field</p>\n              ) : (\n                false\n              )}\n            </FormGroup>\n            {this.props.errorMessage ? (\n              <p className=\"text-danger\">\n                {this.props.errorMessage.message}\n              </p>\n            ) : null}\n            {this.props.loading.status === \"loading\" ? <Loading /> : null}\n            <ModalFooter>\n              <Button\n                outline\n                color=\"secondary\"\n                onClick={() => {\n                  this.props.loginCancel();\n                  this.toggle();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button color=\"primary\" onSubmit={this.handleSubmit}>\n                Sign in\n              </Button>\n            </ModalFooter>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    isLoginFailed: state.auth.isLoginFailed,\n    errorMessage: state.auth.error,\n    loading: state.auth,\n    isLoginCancel: state.auth.isLoginCancel\n    // loading: state.auth.status.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logIn: credential => {\n      dispatch(loginRequest(credential));\n    },\n    loginCancel: () => {\n      dispatch(loginCancel());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","\nimport React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\n\nconst Public = () => {\n  return <p > Public </p>;\n}\n\nexport default Public;\n","\nimport React, { Component } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\n\nconst Protected = () => {\n  return <p> you are in Protected page</p>;\n};\n\nexport default Protected;\n","import React, { Component } from \"react\";\nimport AuthStatus from './pageComponent/AuthStatus';\nimport PrivateRoute from \"./pageComponent/PrivateRoute\";\nimport Login from './pageComponent/Login';\nimport Public from './pageComponent/Public';\nimport Protected from './pageComponent/Protected';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\n\n\nclass AuthExample extends Component {\nrender(){\n  return (\n    <Router>\n      <div>\n        <AuthStatus />\n        <ul>\n          <li>\n            <Link to=\"/public\">Public Page</Link>\n          </li>\n          <li>\n            <Link to=\"/protected\">Protected Page</Link>\n          </li>\n        </ul>\n        <Route path=\"/public\" component={Public} />\n        <PrivateRoute\n          path=\"/protected\"\n          ProtectedComponent={Protected}\n          isAuthenticated={this.props.isAuthenticated}\n        />\n        <Route\n          path=\"/login\"\n          render={props => <Login {...props} />}\n        />\n      </div>\n    </Router>\n  );\n}\n\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated\n  };\n};\n\n\nexport default connect(mapStateToProps)(AuthExample);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  LOGIN_REQUEST,\n  LOGOUT_REQUEST,\n  LOGIN_CANCEL,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n  LOGOUT,\n  LOGOUT_SUCCESS\n} from '../action/actions'\n\nconst authReducer = (state = {\n  isAuthenticated: false,\n  error: null,\n  isLoginCancel: null,\n  isLoginFailed: null,\n  status: null\n}, action) => {\n  console.log('authReducer action:', action)\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      console.log('status:\"loading\"')\n      return {\n        status: 'loading'\n      }\n      case LOGIN_SUCCESS:\n        return {\n          isAuthenticated: true,\n        }\n      case LOGOUT:\n        return {\n          isAuthenticated: false,\n        }\n      case LOGIN_ERROR:\n        return {\n          isAuthenticated: false,\n            error: action.error\n        }\n      case 'LOGIN_FAILED':\n        return {\n          isAuthenticated: false,\n            isLoginFailed: true,\n        }\n      case LOGOUT_SUCCESS:\n        return {\n          isAuthenticated: false,\n        }\n      case LOGIN_CANCEL:\n        return {\n          isLoginCancel: true\n        }\n      default:\n        return state\n  }\n}\n\nexport default authReducer;\n","import authReducer from './authReducer';\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n});\n\nexport default rootReducer;\n","// function checkStatus(response) {\n//   if (response.status >= 200 && response.status < 300) {\n//     return response\n//   } else {\n//     var error = new Error(response.statusText)\n//     error.response = response\n//     throw error\n//   }\n// }\n\n// function parseJSON(response) {\n//   return response.json()\n// }\n\n// function fetchAPI(url, options) {\n//   return fetch(url, options)\n//     .then(checkStatus)\n//     .then(parseJSON)\n// }\n\nexport function loginAPI(credential) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      if (credential.username === 'guest' && credential.password === 'guest') {\n        resolve(true);\n      } else {\n        reject(new Error('wrong password or username'));\n      }\n    }, 5000)\n  });\n}\n","import {\n    takeEvery\n} from 'redux-saga/effects';\nimport {call, put, fork, take, cancel} from 'redux-saga/effects';\nimport {\n LOGIN_REQUEST,\n LOGOUT_REQUEST,\n LOGIN_CANCEL,\n LOGIN_SUCCESS,\n LOGIN_ERROR,\n LOGOUT_SUCCESS\n} from '../store/action/actions';\nimport {loginAPI} from '../API'\n\nexport function* watchRequestLogin() {\n    console.log('watch request')\n    yield takeEvery(LOGIN_REQUEST, loginFlow);\n};\nexport function* loginFlow(action) {\n    const task = yield fork(authorize, action)\n    yield take(LOGIN_CANCEL)\n    yield cancel(task)\n}\n\nexport function* authorize(action) {\n    try {\n        const response = yield call(loginAPI, action.credential)\n        yield put({\n            type: LOGIN_SUCCESS,\n            response\n        })\n    } catch (error) {\n        console.log('error', error)\n        yield put({\n            type: LOGIN_ERROR,\n            error\n        })\n    } finally {\n        console.log('cancelled')\n    }\n}\n\n\n\nexport function* watchRequestLogout(){\n    console.log(886, 'watch logout')\n    yield takeEvery(LOGOUT_REQUEST, logoutFlow);\n};\nexport function* logoutFlow() {\n    console.log(886, 'logoutFlow')\n    yield put({\n        type: LOGOUT_SUCCESS,\n        response: 'logout success'\n    })\n}\n\n\n\n\n// export function* logout(action) {\n//     console.log(886, 'logout', action)\n//     const task = yield fork(authorize, action)\n//     yield take(LOGIN_CANCEL)\n//     yield cancel(task)\n// }\n\n// export function* logoutFlow(action) {\n//     console.log(886, 'logoutflow',action)\n//     const task = yield fork(logout, action)\n// }\n","import {watchRequestLogin} from './login';\nimport {watchRequestLogout} from './login';\nimport {all} from 'redux-saga/effects';\n\n\n\nexport default function* rootSaga() {\n  yield all([\n    watchRequestLogin(),\n    watchRequestLogout(), \n  ])\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\n// import { helloSaga } from './sagas'\nimport createSagaMiddleware from 'redux-saga';\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducer/rootReducer';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport thunk from 'redux-thunk';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk, sagaMiddleware)\n);\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}